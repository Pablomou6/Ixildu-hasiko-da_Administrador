/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package GUI;
import Aplicacion.*;
import java.util.*;
import java.util.stream.Collectors;


/**
 *
 * @author alumnogreibd
 */
public class VAnuncios extends javax.swing.JDialog {
    FachadaAplicacion fachadaAp;
    Sesion sesionEditar;
    VPrincipal padre;
    ModeloListasStrings modRestoAnuncios, modAnunciosSesion;
    ArrayList<Anuncio> anunciosSesion, restoAnuncios, recienAsignados, recienDisponibles;
    /**
     * Creates new form VAnuncios
     */
    public VAnuncios(java.awt.Frame parent, boolean modal, FachadaAplicacion fa, Sesion sesion) {
        super(parent, modal);
        this.fachadaAp = fa;
        this.sesionEditar = sesion;
        this.padre = (VPrincipal) parent;
        modRestoAnuncios = new ModeloListasStrings();
        modAnunciosSesion = new ModeloListasStrings();
        anunciosSesion = new ArrayList<>();
        restoAnuncios = new ArrayList<>();
        recienAsignados = new ArrayList<>();
        recienDisponibles = new ArrayList<>();
        initComponents();
        listaDisponibles.setModel(modRestoAnuncios);
        listaAsignados.setModel(modAnunciosSesion);
        //Añadir lógica para que se recuperen todos los anuncios. Una vez hecho esto, clasificarlos 
        this.recuperarAnuncios();
        botonAceptar.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelAnuncios = new javax.swing.JLabel();
        labelDisponibles = new javax.swing.JLabel();
        labelAsignados = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaDisponibles = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        listaAsignados = new javax.swing.JList<>();
        botonDrch = new javax.swing.JButton();
        botonIzquierda = new javax.swing.JButton();
        botonAceptar = new javax.swing.JButton();
        botonCancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        labelAnuncios.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        labelAnuncios.setText("Edición de anuncios");

        labelDisponibles.setText("Disponibles");

        labelAsignados.setText("Asignados");

        listaDisponibles.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(listaDisponibles);

        listaAsignados.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(listaAsignados);

        botonDrch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/flechaD.jpg"))); // NOI18N
        botonDrch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonDrchActionPerformed(evt);
            }
        });

        botonIzquierda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/flechaI.jpg"))); // NOI18N
        botonIzquierda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonIzquierdaActionPerformed(evt);
            }
        });

        botonAceptar.setText("Aceptar");
        botonAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAceptarActionPerformed(evt);
            }
        });

        botonCancelar.setText("Cancelar");
        botonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(labelDisponibles)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelAsignados)
                .addGap(60, 60, 60))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(botonAceptar))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelAnuncios)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(botonCancelar)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(botonIzquierda, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(botonDrch, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelAnuncios)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelDisponibles)
                    .addComponent(labelAsignados))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(botonDrch)
                        .addGap(32, 32, 32)
                        .addComponent(botonIzquierda))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonAceptar)
                    .addComponent(botonCancelar))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCancelarActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_botonCancelarActionPerformed

    private void botonDrchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonDrchActionPerformed
        String seleccion = listaDisponibles.getSelectedValue();

        if (seleccion == null) {
            fachadaAp.muestraExcepcion("No has seleccionado ningún anuncio.");
            return;
        }

        //Buscar en la lista original de todos los anuncios
        Optional<Anuncio> anuncioOpt = restoAnuncios.stream()
                .filter(a -> a.getTematica().equals(seleccion))
                .findFirst();
        
        if (anuncioOpt.isEmpty()) {
            //Puede que sea un anuncio recién desasignado que estaba en la sesión original
            anuncioOpt = recienDisponibles.stream()
                    .filter(a -> a.getTematica().equals(seleccion))
                    .findFirst();
        }

        if (anuncioOpt.isPresent()) {
            Anuncio anuncio = anuncioOpt.get();

            //Si estaba en recienDisponibles (Antes estaba asignado, pero lo quitamos), lo quitamos de ahí (ya que vuelve a estar asignado, pero ya estaba al inicio)
            if (recienDisponibles.contains(anuncio)) {
                recienDisponibles.remove(anuncio);
            } 
            //Si no estaba ya asignado originalmente, es un nuevo asignado
            else if (!anunciosSesion.contains(anuncio)) {
                recienAsignados.add(anuncio);
            }

            //Creamos listas visuales usando estado final simulado
            List<String> tematicasSesion = new ArrayList<>();
            List<String> tematicasDisponibles = new ArrayList<>();

            //Simulamos resultado: originales + recien asignados - recien desasignados
            //Creamos un conjunto (no permite repetidos) con los originales, le añadimos los recién asignados y le borramos los recién desasignados
            Set<Anuncio> anunciosAsignadosFinales = new HashSet<>(anunciosSesion);
            anunciosAsignadosFinales.addAll(recienAsignados);
            anunciosAsignadosFinales.removeAll(recienDisponibles);

            Set<Anuncio> anunciosDisponiblesFinales = new HashSet<>(restoAnuncios);
            anunciosDisponiblesFinales.addAll(recienDisponibles);
            anunciosDisponiblesFinales.removeAll(recienAsignados);
            
            //Pasamos los conjuntos a un stream que mapeamos de forma que por cada anuncio tomamos su temática y le hacemos un collect a lista
            tematicasSesion = anunciosAsignadosFinales.stream()
                    .map(Anuncio::getTematica)
                    .collect(Collectors.toList());

            tematicasDisponibles = anunciosDisponiblesFinales.stream()
                    .map(Anuncio::getTematica)
                    .collect(Collectors.toList());
            
            //Actualizamos la vista previa de las listas (en caso de que se cancelase, la función que las inicializa no tendría en cuenta este cambio)
            modAnunciosSesion.setElementos(tematicasSesion);
            modRestoAnuncios.setElementos(tematicasDisponibles);
        }
        if(recienAsignados.size() != 0 || recienDisponibles.size() != 0) {
            botonAceptar.setEnabled(true);
        }
    }//GEN-LAST:event_botonDrchActionPerformed

    private void botonIzquierdaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonIzquierdaActionPerformed
        String seleccion = listaAsignados.getSelectedValue();

        if (seleccion == null) {
            fachadaAp.muestraExcepcion("No has seleccionado ningún anuncio.");
            return;
        }

        //Buscar en la lista original de todos los anuncios
        Optional<Anuncio> anuncioOpt = anunciosSesion.stream()
                .filter(a -> a.getTematica().equals(seleccion))
                .findFirst();

        if (anuncioOpt.isEmpty()) {
            //Puede que sea un anuncio recién asignado que aún no estaba en la sesión original
            anuncioOpt = recienAsignados.stream()
                    .filter(a -> a.getTematica().equals(seleccion))
                    .findFirst();
        }

        if (anuncioOpt.isPresent()) {
            Anuncio anuncio = anuncioOpt.get();

            // Si estaba en recienAsignados (lo acabábamos de asignar), lo quitamos de ahí
            if (recienAsignados.contains(anuncio)) {
                recienAsignados.remove(anuncio);
            } 
            // Si no estaba originalmente en restoAnuncios, es un nuevo desasignado
            else if (!restoAnuncios.contains(anuncio)) {
                recienDisponibles.add(anuncio);
            }

            // Simular estado final igual que en el otro botón
            Set<Anuncio> anunciosAsignadosFinales = new HashSet<>(anunciosSesion);
            anunciosAsignadosFinales.addAll(recienAsignados);
            anunciosAsignadosFinales.removeAll(recienDisponibles);

            Set<Anuncio> anunciosDisponiblesFinales = new HashSet<>(restoAnuncios);
            anunciosDisponiblesFinales.addAll(recienDisponibles);
            anunciosDisponiblesFinales.removeAll(recienAsignados);

            List<String> tematicasSesion = anunciosAsignadosFinales.stream()
                    .map(Anuncio::getTematica)
                    .collect(Collectors.toList());

            List<String> tematicasDisponibles = anunciosDisponiblesFinales.stream()
                    .map(Anuncio::getTematica)
                    .collect(Collectors.toList());

            modAnunciosSesion.setElementos(tematicasSesion);
            modRestoAnuncios.setElementos(tematicasDisponibles);
        }
        if(recienAsignados.size() != 0 || recienDisponibles.size() != 0) {
            botonAceptar.setEnabled(true);
        }
    }//GEN-LAST:event_botonIzquierdaActionPerformed

    private void botonAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAceptarActionPerformed
        //Las funciones de los botones hacen las gestiones necesarias para diferenciar los anuncios recién introducidos y desasignados
        if(!fachadaAp.actualizarAnunciosSesion(recienAsignados, recienDisponibles, sesionEditar)) {
            return;
        }
        //Actualizamos las tablas con los anuncios más recientes
        this.recuperarAnuncios();
        recienAsignados.clear();
        recienDisponibles.clear();
        botonAceptar.setEnabled(false);
    }//GEN-LAST:event_botonAceptarActionPerformed
    
    private void recuperarAnuncios() {
        //Vamos a recuperar todos los anuncios disponibles en la base de datos
        ArrayList<Anuncio> todosAnuncios = fachadaAp.obtenerAnuncios();
        //Ahora, recuperamos los anuncios asignados a la sesión, de forma que ya los podemos asignar a la tabla. Además,
        //los usamos para filtrar el resto de anuncios.
        anunciosSesion = fachadaAp.obtenerAnunciosSesion(sesionEditar);
        
        //Ahora, aprovechamos para filtrar el resto de anuncios
        restoAnuncios = new ArrayList<>(todosAnuncios);
        restoAnuncios.removeAll(anunciosSesion); //Para usar esta forma de filtrar reimplementamos el método equals en Anuncio
        
        //Extraemos solo las temáticas para mostrar en las tablas. Convertimos el array en un stream y por cada anuncio obtenemos su temática.
        //Ahora, con collect especificamos que los juntamos todos y que con Collector lo transformamos a Lista
        List<String> tematicasSesion = anunciosSesion.stream()
                .map(Anuncio::getTematica)
                .collect(Collectors.toList());

        List<String> tematicasDisponibles = restoAnuncios.stream()
                .map(Anuncio::getTematica)
                .collect(Collectors.toList());
        
        //Una vez tenemos los anuncios asignados a la sesión, los colocamos en la tabla de la derecha. Lo mismo para la tabla de la izquierda con el resto
        modAnunciosSesion.setElementos(tematicasSesion);
        modRestoAnuncios.setElementos(tematicasDisponibles);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonAceptar;
    private javax.swing.JButton botonCancelar;
    private javax.swing.JButton botonDrch;
    private javax.swing.JButton botonIzquierda;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelAnuncios;
    private javax.swing.JLabel labelAsignados;
    private javax.swing.JLabel labelDisponibles;
    private javax.swing.JList<String> listaAsignados;
    private javax.swing.JList<String> listaDisponibles;
    // End of variables declaration//GEN-END:variables
}
